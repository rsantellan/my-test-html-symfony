<?php

/**
 * mdProduct
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    mdShoppingPlugin
 * @subpackage model
 * @author     Rodrigo Santellan
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginmdProduct extends BasemdProduct {

    public $mdUserIdTmp = 0;
    public $mdNameSpaceIdTmp = 0;
    public $mdApplicationIdTmp = 0;
    public $mdApplicationsTmp = array();
    public $tmp_profile_id = NULL;
    public $tmp_array_md_attribute_values = array();
    public $tmp_array_profile_id = NULL;
    public $mdEmbedProfile = false;

    /**
     * Return the class of this object
     *
     * @return String
     * @author Rodrigo Santellan
     */
    public function getObjectClass() {
        return get_class($this);
    }

    public function retrieveDefault() {
        return "/../mdShoppingDoctrinePlugin/images/noImage.jpg";
    }


    public function save(Doctrine_Connection $conn = null)
    {
      if( sfConfig::get( 'sf_plugins_shopping_sortable', false ) )
      {
        if($this->getId() == 0)
        {
          $aux = self::retrieveLastPriorityNumber();
          $this->setPriority(-($aux) - 1);
        }
      }
      return parent::save($conn);
    }

      public static function retrieveLastPriorityNumber()
      {
        $aux = Doctrine::getTable('mdProduct')->retrieveLastPriorityNumber();
        //print_r($aux);
        return $aux['d_MAX'];
      }
  
    public function getMdContentId() {
        $mdContent = Doctrine::getTable('mdContent')->retreiveByObject($this);
        return $mdContent->getId();
    }

    /**
     * Returns the name for displaying on the catalogue
     * @return String
     * @author Rodrigo Santellan
     */
    public function getDisplayName() {
        return $this->getName();
    }

    public function getSlug(){
        return mdBasicFunction::slugify($this->getName());
    }

    /**
     * Returns the quantity for the displaying on the catalogue
     * @return String
     * @author Rodrigo Santellan
     */
    public function getDisplayQuantity() {
        return $this->getQuantity() . ' ' . $this->getMdUnit()->getSymbol();
    }

    /**
     * Returns the price for the displaying on the catalogue
     * @return String
     * @author Rodrigo Santellan
     */
    public function getDisplayPrice($mdUserProfileId = null) {
        $mdCurrency = Doctrine::getTable('mdCurrency')->findOneBy('code', self::getCurrencyCode());
        return $mdCurrency->getSymbol() . ' ' . round($this->calculatePrice($mdUserProfileId), sfConfig::get("app_rounding"));
    }

    /**
     * Returns the price for the displaying on the catalogue
     * @return String
     * @author Rodrigo Santellan
     */
    public function getSimpleDisplayPrice($mdUserProfileId = null) {
        return $this->calculatePrice($mdUserProfileId);
    }

    /**
     * Returns the value of the mdProduct Attribute of the given name
     * @param String $name of the attribute
     * @return String
     * @author Rodrigo Santellan
     */
    public function getAttributeValueByName($name, $profileName = null) {
        $mdAttributeObject = $this->retrieveAtributeObjectsByAttributeName($name, $profileName);
        if (!$mdAttributeObject) {
            throw new Exception('No mdAttribute related with that name', 150);
        }
        return $mdAttributeObject->getValue();
    }

    /**
     * Returns the value of the mdProduct Attribute of the given name
     * @param String $name of the attribute
     * @return String
     * @author Rodrigo Santellan
     */
    public function getAttributeObjectByName($name, $profileName = null) {
        $mdAttributeObject = $this->retrieveAtributeObjectsByAttributeName($name, $profileName);
        return $mdAttributeObject;
    }

    /**
     * because products behave as mdSaleable, it must implement getShortDescription method
     *
     * @return string
     * @author Rodrigo Santellan
     */
    public function getShortDescription() {
        return $this->getName();
    }

    public function getSalePrice($mdUserProfileId = null) {

        return $this->calculatePrice($mdUserProfileId);
    }

    /**
     * Calculates the real price of the presentation.
     * @return float
     * @author Rodrigo Santellan
     */
    public function calculatePrice($mdUserProfileId = null) {
        $value = $this->getPrice();
        if (!is_null($mdUserProfileId)) {
            //Calculo el descuento...
            $percent = 0;
            /*try {
                $mdDiscountGroup = Doctrine::getTable('mdDiscountGroup')->getDiscountGroup($mdUserProfileId);

                if ($mdDiscountGroup) {
                    $percent = $mdDiscountGroup->getDiscount() / 100;
                }
            } catch (Exception $e) {
                
            }*/
            $percentValue = $value * $percent;
            $value = $value - $percentValue;
        }

        $currencyTo = self::getCurrencyCode();
        return mdCurrencyConvertion::convert($this->getMdCurrency()->getCode(), $currencyTo, $value);
        //Esto habria que pasarlo a un helper para que sea usado unicamente de los templates
        //$p = mdBasicFunction::i18n_value_replace($value, sfContext::getInstance()->getUser()->getCulture());
    }

    /**
     * because presentations behave as mdSaleable, it must implement getCartShownImage method
     *
     * @return string
     * @author Rodrigo Santellan
     */
    public function getCartShownImage() {
        return $this->getDefaultImage();
    }

    /**
     * because presentations behave as mdSaleable, it must implement getCartShownName method
     *
     * @return string
     * @author Rodrigo Santellan
     */
    public function getCartShownName() {
        return $this->getName();
    }

    /**
     * because presentations behave as mdSaleable, it must implement getCartShownDescription method
     *
     * @return string
     * @author Rodrigo Santellan
     */
    public function getCartShownDescription() {
        return $this->getName();
    }

    public function getUploadPath() {
        return '/images/productos/';
    }

    public function getPriceWithRelated() {
        $price = $this->getPrice();
        foreach ($this->getContents() as $relations) {
            $price += $relations->getPrice();
        }
        return $price;
    }

    public static function getAllMdProductsOfProfile($mdProfileName) {
        $mdProduct = new mdProduct();
        $idList = $mdProduct->getAllObjctsIdsOfProfile($mdProfileName);
        return Doctrine::getTable('mdProduct')->getAllMdProductOfList($idList);
    }

    public static function getCurrencyCode() {
        $currencyCode = sfConfig::get('sf_currency_code');
        if (is_null($currencyCode)) {
            throw new Exception('you have to define currency_code in settings.yml', 100);
        }
        return $currencyCode;
    }

    public function getPosibleUnitsQuantity() {
        $mdUnits = Doctrine::getTable('mdUnit')->getAllUnits();
        return count($mdUnits);
    }

    public function getPosibleUnits() {
        $mdUnits = Doctrine::getTable('mdUnit')->getAllUnits();
        return $mdUnits;
    }

    public function retrieveBackUpFields()
    {
        $list = array();
        $list[] = "id";
        $list[] = "name";
        $list[] = "price";
        $list[] = "quantity";
        $list[] = "is_public";
        $list[] = "md_unit_id";
        $list[] = "md_currency_id";
        $list[] = "is_multiple";

        return $list;
    }

    public function bulkHasCategory()
    {
        return true;
    }

    public function bulkHasImages()
    {
        return true;
    }

    public function getLongDescription()
    {
        return $this->getName();
    }
    
    public function getBackendClosedBoxText()
    {
      $return = '<div class="md_object_owner">';
      $return .='<div>'.$this->getDisplayName().'<span> - '.$this->getQuantity().' '. $this->getMdUnit().'</span></div>';
      $return .='</div>';
      $return .='<div class="md_object_categories">';
      $index = 0;
      $quantity = count($this->getmdCategories());
      foreach($this->getmdCategories() as $mdCategory)
      {
        $return .= $mdCategory->getName();
        if($quantity > 1 && ($index <= $quantity -2))
        {
           $return .= ', ';
        }
        $index++;
      }
      $return .= '</div>';
      return $return;
    }
}
