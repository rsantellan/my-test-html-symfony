<?php

/**
 * mdCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    plugin mdCategory
 * @subpackage model
 * @author     Rodrigo Santellan
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginmdCategory extends BasemdCategory
{
  
  public $mdEmbedProfile = false;

  public $tmp_array_profile_id = NULL;
	
  public $tmp_array_md_attribute_values = array();

  private $tmpName = null;
  
  public static function getStaticObjectClass()
  {
    $aux = new mdCategory();
    return $aux->getObjectClass();
  }
  public function getObjectClass(){
    return get_class($this);
  }

/*  public function setTmpName($name)
  {
    $this->tmpName = $name;
  }

  public function retrieveName()
  {
    if(is_null($this->tmpName))
    {
      return $this->getName();
    }
    else
    {
      return $this->tmpName;
    }
  }
*/
/*
  public static function hydratateMdCategory($array)
  {
    $new = true;
    if(isset($array['j_id']) && $array['j_id'] != 0)
    {
      $new = false;
    }
    $aux = new mdCategory(Doctrine_Core::getTable(mdCategory::getStaticObjectClass()), $new);
    $aux->setId($array['j_id']);
    $aux->setLabel($array['j_label']);
    $aux->setObjectClassName($array['j_object_class_name']);
    $aux->setMdCategoryParentId($array['j_md_category_parent_id']);
    $aux->setPriority($array['j_priority']);
    $aux->setTmpName($array['mdC_name']);
    
    return $aux;
  }
  */
  public function getSonsCategories(){
      return Doctrine::getTable('mdCategory')->getChilds($this->getId());
  }

  public function getSonsCategoriesRandom($limit = 0){
      return Doctrine::getTable('mdCategory')->getChildsRandom($this->getId(), $limit);
  }

  public function getAllSonsCategories(){
      return Doctrine::getTable('mdCategory')->getAllChilds($this->getId());
  }

  public function getLevel($level = 0){
      if($this->getMdCategoryParentId()){
          $level ++;
          $level = $this->getMdCategory()->getLevel($level);
      }
      return $level;
  }
  
  public function obtainRoot(){
    if($this->getMdCategoryParentId()){
        return $this->getMdCategory()->obtainRoot();
    }else{
        return $this;
    }
  }

  public function obtainRootPath($path = array())
  {
    if($this->getMdCategoryParentId()){
        array_push($path, $this->getName());
        return $this->getMdCategory()->obtainRootPath($path);
    }else{
        $result = array_reverse($path);
        $string = $this->getName();
        $index = 0;
        
        foreach($result as $value)
        {
          if(count($result) != $index)
          {
            $string .= " | ";
          }
          
          $string .= $value;

          $index++;
        }
        return $string;
    }			
  }

  public function getMdParentCategory(){
      if($this->getMdCategoryParentId() != NULL){
          return Doctrine::getTable('mdCategory')->find($this->getMdCategoryParentId());
      }
      return NULL;
  }

  public function getMdParentsCategory(){
      $parents = array();
      $parent = $this->getMdParentCategory();
      if(!is_null($parent)){
          array_push($parents, $parent);
          $more_parents = $parent->getMdParentsCategory();
          $parents = array_merge($more_parents, $parents);
      }
      return $parents;
  }
  
  
  public function preSave($event)
  {
      //sfContext::getInstance()->getLogger()->log('mdDynamicContent - preSave, refrescamos el cache');
      Doctrine::getTable('mdCategory')->refreshCache($this->getId(), $this->getLabel());
      Doctrine::getTable('mdCategory')->refreshCache($this->getMdCategoryParentId());
      
  }

  public function postDelete($event)
  {
    //sfContext::getInstance()->getLogger()->log('mdDynamicContent - postDelete, refrescamos el cache');
    Doctrine::getTable('mdCategory')->refreshCache($this->getId(), $this->getLabel());
    Doctrine::getTable('mdCategory')->refreshCache($this->getMdCategoryParentId());
  }
      
  public function save(Doctrine_Connection $conn = null) 
  {
    if( sfConfig::get( 'sf_plugins_category_priority', false ) )
    {
      if($this->getId() == 0)
      {
        $aux = mdCategoryHandler::retrieveLastPriorityNumber($this->getObjectClassName(), $this->getMdCategoryParentId());
        $this->setPriority($aux + 1);
      }
    }
    return parent::save($conn);
  }

 }

 class mdTreeMdCategory{

    public $mdCategory;

    public $brother;

    public $son;

    private $index = 0;

    public function __construct($category = null){
        $this->mdCategory = $category;
    }

    public function nodeExists($mdCategory, $mdTreeMdCategory){
        if($mdTreeMdCategory == null) return null;
        if($mdTreeMdCategory->mdCategory->getId() == $mdCategory->getId()){
            return $mdTreeMdCategory;
        }else{
            $aux = $this->nodeExists($mdCategory, $mdTreeMdCategory->brother);
            if($aux){
                return $aux;
            }else{
                return $this->nodeExists($mdCategory, $mdTreeMdCategory->son);
            }
        }
    }

    public function insert($mdCategory, $mdTreeMdCategory){

        $exitsTree = $this->nodeExists($mdCategory, $mdTreeMdCategory);

        if($exitsTree) return $exitsTree;
        //Chequeo que no sea root total de su nodo.

        if(!$mdCategory->getMdCategoryParentId()){
            if(!$mdTreeMdCategory){
                $mdTreeMdCategory = new mdTreeMdCategory();
                $mdTreeMdCategory->mdCategory= $mdCategory;
                return $mdTreeMdCategory;
            }else{
                $treeNodeParent= $mdTreeMdCategory;
                while($treeNodeParent->brother){
                    $treeNodeParent = $treeNodeParent->brother;
                }
                $insertNode = new mdTreeMdCategory();
                $insertNode->mdCategory= $mdCategory;
                $treeNodeParent->brother = $insertNode;
                return $insertNode;
            }
        }
        $parentTree = $this->nodeExists($mdCategory->getMdCategory(), $mdTreeMdCategory);

        if(!$parentTree){
            $parentTree = $this->insert($mdCategory->getMdCategory(), $mdTreeMdCategory);
        }

        $insertNode = $parentTree->son;
        if($insertNode){
            $treeNode = $parentTree->son;

            while($treeNode->brother){
                $treeNode = $treeNode->brother;
            }

            $insertNode = new mdTreeMdCategory();
            $insertNode->mdCategory= $mdCategory;
            $treeNode->brother = $insertNode;
            return $insertNode;
        }else{
            $insertNode = new mdTreeMdCategory();
            $insertNode->mdCategory= $mdCategory;
            $parentTree->son = $insertNode;
            return $insertNode;
        }

    }

    public function show(){
        print_r($this->mdCategory->getName());
        //print_r('--<br>');
        print_r(' - ');
        if($this->son){
           // print_r($this->mdCategory->getId().'--son--');
            $this->son->show();
        }

        if($this->brother){
            //print_r($this->mdCategory->getId().'--brother--');
            $this->brother->show();
        }
    }
}

